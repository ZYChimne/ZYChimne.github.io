[{"content":"Bit Manipulation is elegant, as it operates on bits and has unparalleled efficiency. It is also confusing and difficult to understand, because its algorithms are not intuitive. Here is my collection of bit manipulation tricks.\nSimple Bit Manipulation Tricks  Set Union: A | B Set Intersection: A \u0026amp; B Set Subtraction: A \u0026amp; ~B Set Negation of All Bits: ^A or ~A Set Bit of A: A |= (1 \u0026laquo; bit) Clear Bit: A \u0026amp; ~(1 \u0026laquo; bit) Test Bit: (A \u0026amp; (1 \u0026laquo; bit)) != 0 Toggle Bit: (A ^ (1 \u0026laquo; bit)) Extract Last Bit: A \u0026amp; ~A or A \u0026amp; (A-1) or A ^ (A \u0026amp; (A-1)) Remove Last Bit: A \u0026amp; (A-1) Get All 1 Bits: ~0 Isolate Rightmost Bit: A \u0026amp; (-A) Propagate Rightmost Bit: (A | (A-1)) Isolate Rightmost 0: ~A \u0026amp; (A+1) Turn on Rightmost 0 Bit: (A | (A+1)) Contrast Number: ~A + 1 or (A ^ -1) + 1 Modulo 2^A against B: A \u0026amp; (B - 1); Absolute Value: (A ^ (A \u0026raquo; 31)) - (A \u0026raquo; 31) Get Max Value: B \u0026amp; ((A-B) \u0026raquo; 31) | A \u0026amp; (~(A-B) \u0026raquo; 31) Get Min Value: A \u0026amp; ((A-B) \u0026raquo; 31) | B \u0026amp; (~(A-B) \u0026raquo; 31)  Count the Number of Ones 1 2 3 4 5 6 7  int count_one(int n) { while(n) { n = n\u0026amp;(n-1); count++; } return count; }   Is Power of 2 1 2 3  int is_power_of_two(int n) { return !(n\u0026amp;(n-1)); }   Is Power of 4 1 2 3 4  int mask = 0x55555555 // check the 1-bit location; bool is_power_of_four(int n) { return !(n\u0026amp;(n-1)) \u0026amp;\u0026amp; (n\u0026amp;mask); }   Sum of 2 Integers 1 2 3 4  int sum(int a, int b) { // be careful about the terminating condition  return b==0? a:sum(a^b, (a\u0026amp;b)\u0026lt;\u0026lt;1); }   1 2 3 4 5 6 7 8  int sum(int a, int b) { while(b!=0){ unsigned int c=(unsigned int)(a\u0026amp;b)\u0026lt;\u0026lt;1; a=a^b; b=c; } return a; }   Missing Number Given an array containing n distinct numbers taken from 0, 1, 2, \u0026hellip;, n, find the one that is missing from the array.\n1 2 3 4 5 6 7 8  int missing_number(vector\u0026lt;int\u0026gt;\u0026amp; nums) { int ret = 0; for(int i = 0; i \u0026lt; nums.size(); ++i) { ret ^= i; ret ^= nums[i]; } return ret^=nums.size(); }   The Most Significant Bit Find the largest power of 2 (most significant bit in binary form), which is less than or equal to the given number N.\n1 2 3 4 5 6 7 8 9  long most_significant_bit(long n) { //changing all right side bits to 1.  n = n | (n\u0026gt;\u0026gt;1); n = n | (n\u0026gt;\u0026gt;2); n = n | (n\u0026gt;\u0026gt;4); n = n | (n\u0026gt;\u0026gt;8); n = n | (n\u0026gt;\u0026gt;16); return (n+1)\u0026gt;\u0026gt;1; }   Reverse Bits 1 2 3 4 5 6 7 8 9  uint32_t reverse_bits(uint32_t n) { unsigned int mask = 1\u0026lt;\u0026lt;31, res = 0; for(int i = 0; i \u0026lt; 32; ++i) { if(n \u0026amp; 1) res |= mask; mask \u0026gt;\u0026gt;= 1; n \u0026gt;\u0026gt;= 1; } return res; }   1 2 3 4 5 6 7 8 9  uint32_t reverse_bits(uint32_t n) { uint32_t mask = 1, ret = 0; for(int i = 0; i \u0026lt; 32; ++i){ ret \u0026lt;\u0026lt;= 1; if(mask \u0026amp; n) ret |= 1; mask \u0026lt;\u0026lt;= 1; } return ret; }   1 2 3 4 5 6 7 8  uint32_t reverse_bits(uint32_t n) { n = (n \u0026gt;\u0026gt; 16) | (n \u0026lt;\u0026lt; 16); n = ((n \u0026amp; 0xff00ff00) \u0026gt;\u0026gt; 8) | ((n \u0026amp; 0x00ff00ff) \u0026lt;\u0026lt; 8); n = ((n \u0026amp; 0xf0f0f0f0) \u0026gt;\u0026gt; 4) | ((n \u0026amp; 0x0f0f0f0f) \u0026lt;\u0026lt; 4); n = ((n \u0026amp; 0xcccccccc) \u0026gt;\u0026gt; 2) | ((n \u0026amp; 0x33333333) \u0026lt;\u0026lt; 2); n = ((n \u0026amp; 0xaaaaaaaa) \u0026gt;\u0026gt; 1) | ((n \u0026amp; 0x55555555) \u0026lt;\u0026lt; 1); return n; }   1 2 3 4 5 6 7 8 9 10 11  const uint32_t M1 = 0x55555555; // 01010101010101010101010101010101 const uint32_t M2 = 0x33333333; // 00110011001100110011001100110011 const uint32_t M4 = 0x0f0f0f0f; // 00001111000011110000111100001111 const uint32_t M8 = 0x00ff00ff; // 00000000111111110000000011111111 uint32_t reverse_bits(uint32_t n) { n = n \u0026gt;\u0026gt; 1 \u0026amp; M1 | (n \u0026amp; M1) \u0026lt;\u0026lt; 1; n = n \u0026gt;\u0026gt; 2 \u0026amp; M2 | (n \u0026amp; M2) \u0026lt;\u0026lt; 2; n = n \u0026gt;\u0026gt; 4 \u0026amp; M4 | (n \u0026amp; M4) \u0026lt;\u0026lt; 4; n = n \u0026gt;\u0026gt; 8 \u0026amp; M8 | (n \u0026amp; M8) \u0026lt;\u0026lt; 8; return n \u0026gt;\u0026gt; 16 | n \u0026lt;\u0026lt; 16; }   Bitwise AND of Numbers Range Given a range [m, n] where 0 \u0026lt;= m \u0026lt;= n \u0026lt;= 2147483647, return the bitwise AND of all numbers in this range, inclusive.\n1 2 3 4 5 6 7 8 9  int range_bitwise_and(int m, int n) { int a = 0; while(m != n) { m \u0026gt;\u0026gt;= 1; n \u0026gt;\u0026gt;= 1; a++; } return m\u0026lt;\u0026lt;a; }   Number of 1 Bits Write a function that takes an unsigned integer and returns the number of â€™1\u0026rsquo; bits it has (also known as the Hamming weight).\n1 2 3 4 5 6 7 8  int hamming_weight(uint32_t n) { int count = 0; while(n) { n = n\u0026amp;(n-1); count++; } return count; }   1 2 3 4 5 6 7 8 9  int hamming_weight(uint32_t n) { long mask = 1; int count = 0; for(int i = 0; i \u0026lt; 32; ++i){ // 31 will not do, delicate  if(mask \u0026amp; n) count++; mask \u0026lt;\u0026lt;= 1; } return count; }   1 2 3 4 5 6 7 8 9 10 11 12 13 14  int hamming_weight(uint32_t z) { // each bit in n is a one-bit integer that indicates  // how many bits are set in that bit  z = (z \u0026amp; 0x55555555) + ((z \u0026gt;\u0026gt; 1) \u0026amp; 0x55555555); // Now every two bits are a two bit integer that indicate  // how many bits were set in those two bits in the original number  z = (z \u0026amp; 0x33333333) + ((z \u0026gt;\u0026gt; 2) \u0026amp; 0x33333333); // Now we\u0026#39;re at 4 bits  z = (z \u0026amp; 0x0f0f0f0f) + ((z \u0026gt;\u0026gt; 4) \u0026amp; 0x0f0f0f0f); z = (z \u0026amp; 0x00ff00ff) + ((z \u0026gt;\u0026gt; 8) \u0026amp; 0x00ff00ff); z = (z \u0026amp; 0x0000ffff) + ((z \u0026gt;\u0026gt; 16) \u0026amp; 0x0000ffff); // 32 bits  return (int)z; }   Exchange Two Integers without Additional Parameters 1 2 3  a = a ^ b; b = a ^ b; a = a ^ b;   Find Two Numbers Appearing Twice 1 2 3 4 5 6 7 8 9 10 11  vector\u0026lt;int\u0026gt; single_number(vector\u0026lt;int\u0026gt;\u0026amp; nums) { int sum=0; for(int\u0026amp; num:nums)sum^=num; int type1=sum==INT_MIN?sum:sum\u0026amp;(-sum), sum1=0; for(int\u0026amp; num:nums){ if(num\u0026amp;type1){ sum1^=num; } } return {sum1, sum^sum1}; }   Binary Number with Alternating Bits 1 2 3 4  bool has_alternating_bits(int n) { long a = n ^ (n \u0026gt;\u0026gt; 1); return (a \u0026amp; (a + 1)) == 0; }   Number Complement The complement of an integer is the integer you get when you flip all the 0\u0026rsquo;s to 1\u0026rsquo;s and all the 1\u0026rsquo;s to 0\u0026rsquo;s in its binary representation.\n1 2 3 4 5 6 7 8 9  int find_complement(int num) { int highestBit=0; for(int i=1;i\u0026lt;31;i++){ if(num\u0026gt;=(1\u0026lt;\u0026lt;i))highestBit=i; else break; } int mask=highestBit==30?0x7fffffff:((1\u0026lt;\u0026lt;(highestBit+1))-1); return num^mask; }   Counting Bits Given an integer n, return an array ans of length n + 1 such that for each i (0 \u0026lt;= i \u0026lt;= n), ans[i] is the number of 1\u0026rsquo;s in the binary representation of i.\n1 2 3 4 5 6 7  vector\u0026lt;int\u0026gt; count_bits(int n) { vector\u0026lt;int\u0026gt;res(n+1); for(int i=1;i\u0026lt;=n;i++){ res[i]=res[i\u0026gt;\u0026gt;1]+(i\u0026amp;1); } return res; }   Maximum Product of Word Length Given a string array words, return the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. If no such two words exist, return 0.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  int max_product(vector\u0026lt;string\u0026gt;\u0026amp; words) { int size=words.size(); unordered_map\u0026lt;int, int\u0026gt;m; for(const string\u0026amp; word:words){ int temp=0; for(const char\u0026amp; c:word){ temp|=(1\u0026lt;\u0026lt;(c-\u0026#39;a\u0026#39;)); // use bit to save space  } if(!m.count(temp)||word.size()\u0026gt;m[temp]){ m[temp]=word.size(); } } int res=0; for(const auto\u0026amp; mask1:m){ for(const auto\u0026amp; mask2:m){ if((mask1.first\u0026amp;mask2.first)==0){ res=max(res, mask1.second*mask2.second); } } } return res; }   References  A summary: how to use bit manipulation to solve problems easily and efficiently What USEFUL bitwise operator code tricks should a developer know about?  Additional Resources  Bit Twiddling Hacks  ","date":"2022-05-28T00:00:00Z","permalink":"https://zychimne.github.io/posts/bit-manipulation/","title":"Bit Manipulation"},{"content":"I keep asking myself what modern front-end development would be like. A lot of websites are bootstrapped from create-react-app, Next, Umi and other front-end frameworks today. They save the users a lot of trouble from setting up the configuration themselves. I haven\u0026rsquo;t used Next to build large-scale applications, so I would share my experience with create-react-app, Umi 3 and Umi 4. It is note worthy that Umi 4 is still in the release candidate phase (2022/05/27), so it is not as stable and reliable as Umi 3 and I wouldn\u0026rsquo;t recommend you to use it in enterprise projects.\nCreate React App Create React App is very friendly for people who are working with react for the first time. It creates a starter template and configures Webpack, Babel and other tools. Users do not need to know how to set them up. For advanced users, self-configured files will overwrite default settings, so it works perfectly for both starters and advanced developers. It has built-in CSS module support, and users can change css file extension to module to enable this feature.\nUmi Create React App is fine for small applications. However, when it comes to large-scale front-end application, create-react-app suffers from long webpack bundling time, no server side rendering support, difficult configurations and routings, etc. This is where Next and Umi is good at, especially when people first use them to support server side rendering. React itself is client side rendering, which means that when users request a web page from a server, the server returns an html with minimal elements and links pointing to react javascript. The browser needs to parse the javascript to render the whole page, which is a much slower process and has worse search engine optimization than server side rendering.\nUmi supports common features like CSS modules, routing, server side rendering, mock, plugins, webpack 5, lazy loading, etc. Developers do not have to know how to write code to make them work. Umi 3 is very stable as an enterprise level front-end framework. It locks the dependencies by default. Developers do not need to worry about waking up the next day and finding your dependencies are down.\nUpgrading to Umi 4 from Umi 3, except some api breaking changes and default to react 18, I can tell that bundling process is much faster than before. Umi 4 has MSFU (Module Federation Speed Up) V3. It compiles dependencies of the application once and for ever. When the components of the application change, it doesn\u0026rsquo;t have to compile the whole application from scratch. I didn\u0026rsquo;t turn MSFU on in Umi 3 because some libraries are not compatible with Webpack 5, and there are many warnings and errors showing up in the terminal. However, when it comes to Umi 4, everything has changed. MSFU is enabled by default, and the bundling process is very smooth. No more warnings and errors, and faster than you can ever imagine. Developing web pages with Umi 4 is a much more enjoyable experience than ever.\nHugo, and other static site generators As you can tell, my blog website is generated by Hugo. Hugo is fast, reliable, and easy to use. I can write blogs in markdown format, and Hugo will compile it to bundled html, css and javascript. I used to use Jekyll to set up my website. In the past, I forked a template from github page academic template and filled it with my own information. If I want to debug it locally, I need to install gem, a tool for ruby library management. What\u0026rsquo;s more, the website of Jekyll looks a bit out-dated, so I began to look for Jekyll alternatives. It seems like I have two choices, Hexo and Hugo. Hexo is written in javascript and relies on npm (node package manager) and node to run. Hugo is written in Go, a programming language known for speed and parallelization. I was not sure which one to use, as they both seem to be a decent choice for me. A large part of personal websites is themes, as we all want our website to look modern, beautiful and comfortable. Hugo\u0026rsquo;s themes caught my eye. I know this is what I want exactly when I first saw it. Beautiful layouts, smooth animations, and the experience of reading blogs is like reading a magazine.\nSetting up Hugo is easy. On macOS, run\n1 2 3 4 5 6 7 8 9 10  brew install hugo # install hugo on macOS hugo new site your-site-name # create a new folder with starter template git init # init git version control git submodule add your-path git@your-theme-git # add your chosen theme # Follow the instructions of setup in your chosen theme hugo server -D # start hugo server and you can see your page on localhost hugo --minify # build your site to release version # If you want to integrate with github pages, # don\u0026#39;t forget to set up github action workflows  # and change page source to gh-pages.   After running to above command, I can write blogs in /content/posts/my-blog-name/index.md and publish them when I push my code to github and they will get deployed automatically. Hugo is extremely fast, the github action usually takes less than 30 seconds to run.\nConclusion For developers who want to try or build a simple react website, I would recommend create-react-app. If the website is complicated, I believe Next and Umi would be a better choice. If you want to write blogs only, you can\u0026rsquo;t miss Hugo.\n","date":"2022-05-27T00:00:00Z","permalink":"https://zychimne.github.io/posts/modern-frontend-development/","title":"Modern Front-end Development"},{"content":"","date":"2022-05-01T00:00:00Z","permalink":"https://zychimne.github.io/posts/algorithms/","title":"Algorithms"},{"content":"","date":"2022-05-01T00:00:00Z","permalink":"https://zychimne.github.io/posts/css-tricks/","title":"CSS Tricks"},{"content":"","date":"2022-05-01T00:00:00Z","permalink":"https://zychimne.github.io/posts/react-essentials/","title":"React Essentials"},{"content":"","date":"2022-05-01T00:00:00Z","permalink":"https://zychimne.github.io/posts/regular-expression/","title":"Regular Expression"},{"content":"","date":"2022-05-01T00:00:00Z","permalink":"https://zychimne.github.io/posts/typescript-essentials/","title":"TypeScript Essentials"},{"content":"","date":"2022-03-01T00:00:00Z","permalink":"https://zychimne.github.io/posts/golang-essentials/","title":"Golang Essentials"},{"content":"How to define the meaning of a word One-Hot Vector Say we have 3 word, \u0026ldquo;natural\u0026rdquo;, \u0026ldquo;language\u0026rdquo;, \u0026ldquo;processing\u0026rdquo;, we can define:\n \u0026ldquo;nature\u0026rdquo;=[1, 0, 0], \u0026ldquo;language\u0026rdquo;=[0, 1, 0], \u0026ldquo;processing\u0026rdquo;=[0, 0, 1]  Cons:  With the increase of the words, the dimension of the vectors grows rapidly. Any vector timing another vector equals 0, we cannot use cosine to measure their similarity.  Word2Vec The basic theory is that we can know the meanning of a word from the words beside them.\nSkip-Gram Model Say we have a phrase \u0026ldquo;natural language processing\u0026rdquo;, take \u0026ldquo;language\u0026rdquo; as a central word then we have: P(\u0026ldquo;natural\u0026rdquo;) = P(\u0026ldquo;natural\u0026rdquo;|\u0026ldquo;language\u0026rdquo;) P(\u0026ldquo;processing\u0026rdquo;)=P(\u0026ldquo;processing\u0026rdquo;|\u0026ldquo;language\u0026rdquo;) Generally, we have $$ P(Context Word = o| Center Word = c) = \\frac{e^{(u_o^Tv_c)}}{\\sum\\nolimits_{w\\in{Vocab}}e^{(u_w^Tv_c)}} $$ Loss function would be $$ J(\\theta) = -\\frac{1}{T}logL(\\theta) = -\\frac{1}{T}\\sum_{t=1}^T\\sum_{-m\\leq j\\leq m\u0026amp;j\\neq0}logP(w_{t+j}|w_t; \\theta) $$ Note that $L(\\theta)$ is the maximum likelihood function.\nSingle Value Decomposition We use a word-to-document co-occurrence matrix. Say we have two sentences, and the window size = 1. I like deep learning. I like natural language processing.\n    I like deep learning natural language processing     I 0 2 0 0 0 0 0   like 2 0 1 0 1 0 0   deep 0 1 0 1 0 0 0   learning 0 0 1 0 0 0 0   natural 0 1 0 0 0 1 0   language 0 0 0 0 1 0 1   processing 0 0 0 0 0 1 0   Then we can compress the matrix and store the vectors.           GloVe As its name suggests, GloVe uses global information to build vectors. $X_{ij}$ means how many times word j has shown up in the context of word i, then $X_i = \\sum_kX_{ik}$ means all the words showing up in the context of word i. The probility of word j showing up in the context of word i is denoted as $$ P_{ij} = P(j|i) = X_{ij} / X_i $$ Loss Function: $$ w_i * w_j = logP(i|j) $$ $$ J = \\sum_{i, j = 1}^Vf(X_{ij})(w_i^T\\tilde{w_j} + b_i + \\tilde{b_j} - logX_{ij})^2 $$\nNamed Entity Recognition We want to find the names in the text and classfy them, for example:\nOnly France [LOC] and Britain [LOC] back Fischler [PER] \u0026rsquo;s proposal.\nWindow Classification We can use the words beside the target word to classify it.\nSay the window size = 2 and the target word is Paris. We can have a window like:\nmuseum in Paris are amazing\nx1 x2 x3 x4 x5\n$X_{window} = [x_1, x_2, x_3, x_4, x_5]$ If we have mulitple class, we can use a softmax classifier.\nSay x denotes the input word vector and y is the target class among k classes, then we have $$ P(y|x) = \\frac{e^{(W_yx)}}{\\sum_{c=1}^ke^{(W_cx)}} $$ The loss function is a cross entropy function: $$ J(\\theta) = \\frac{1}{N}\\sum_{i = 1}^N-log(\\frac{e^{(W_yx)}}{\\sum_{c = 1}^ke^{(W_cx)}}) $$\nSyntactic Structure Analaysis Constituency Parsing Analyse the words as part of speech [POS], and then connect them as phrases and finally sentences.\nSay we have a phrase like\nthe cute cat at the coffee shop\nIts structure is [DET] [ADJ] [NOUN] [PREP] [DET] [NOUN], and Noun Phrase = { [DET] [ADJ] [NOUN] }, Preposition Phrase = { [PREP] [DET] [NOUN] }, and they together make a sentence.\nDependency Parsing Transition-based Dependency Parsing Transition-based dependency parsing is very similar to a state machine, for a given sentence $S = {w_0w_1\\cdots w_n}$, the state has three parts, $(\\sigma, \\beta, A)$.\n$\\sigma$ is a stack of words.\n$\\beta$ is a buffer of words.\nA is a collection of dependency arc, every edge is like $(w_i, r, w_j)$, and r denotes the dependency between words.\nAt the initial state, $\\sigma$ contains ROOT $w_0$ only, and $\\beta$ contains the rest of the sentence, while A is an empty set.\nThere are 3 transition between states:\n SHIFT: pop the first word out of the buffer and put it in the stack. LEFT-ARC: add $(w_j, r, w_i)$ to the collection of edges, and $w_j$ is on the top of the stack while $w_i$ is the second top one of the stack. RIGHT-ARC: add $(w_i, r, w_j)$ to the collection of edges, and $w_i$ is on the top of the stack while $w_j$ is the second top one of the stack.  Language Model The model is about :\nGiven {$x_1, x_2, \\cdots, x_n$}, predict $x_{n+1}$. $$ P(x^{t + 1}, x^t, \\cdots, x^1) = \\sum_{t = 1}^TP(x^{t+1} | x^t, \\cdots, x^1) $$\nN-Gram Model The most classic one is the N-Gram Model. For example, the bigram of \u0026ldquo;natural language processing\u0026rdquo; is \u0026ldquo;natural language\u0026rdquo; and \u0026ldquo;language processing\u0026rdquo;.\nThe basic assumption of the model is that\n the probability of n-gram is propotional to the probability of the word. $P(x^{t + 1})$ is only related to the (n - 1) word before it. $$ P(x^{t + 1} | x^t, \\cdots, x^1) \\approxeq \\frac{count(x^{t + 1}, x^t, \\cdots, x^{t - n + 2})}{count(x^t, \\cdots, x^{t - n + 2})} $$ Cons: Sparsity Problem The storage grows very fast as the n grows.  Recurrent Neural Network In a RNN, different parameters share a same matrix, and they are not limited to a fixed size window.\nHidden Layer: $$ h_t = \\sigma(W^{(hh)}h_{t - 1} + W^{ht}x_{[t]}) $$ Output: $$ \\hat{y_t} = softmax(W^{(S)}h_t) $$ The loss function is cross entropy loss.\nWe can use perplexity to evalute our language model. $$ perplexity = e^{J(\\theta)} $$ Pros:\n It can deal with input of any length. We can use information with a long history. The size of the model does not increase with input size. The parameters of weights are shared efficiently. Cons: RNN is comparatively slow because it is not parallel. Gradient vanishing makes long history information hard to capture.  Gradient Vanishing and Gradient Explosion In $W^{(t - k)}$, if |W| is smaller than 1, as t - k incrrases, W is likely to become very small so it is very likely for us to loss information from the past. In the opposite, if |W| is greater than 1, as t - k incrrases, W is likely to become very large and cause explosion.\nGradient clipping If the gradient is greater than the preset threshold, we clip the gradient.\nLong Short Term Memory (LSTM) We introduce cell states to store the long-term information, and they can be written and erased by control gate. A general LSTM: Input gate $$ i_t = \\sigma(W^{(i)}x_t + U^{(i)}h_{t - 1}) $$ Forget gate $$ f_t = \\sigma(W^{(f)}x_t + U^{(f)}h_{t - 1}) $$ Output gate $$ o_t = \\sigma(W^{(o)}x_t + U^{(o)}h_{t - 1}) $$ New memory cell $$ \\tilde{c_t} = tanh(W^{(c)}x_t + U^{(c)}h_{t - 1}) $$ Final memory cell $$ c_t = f_t\\circ c_{t - 1} + i_t\\circ \\tilde{c_t} $$ Hidden state $$ h_t = o_t\\circ tanh(c_t) $$ Gated Recurrent Unit (GRU) GRU is very similar to LSTM, it combines forget gate and input gate into an update gate, and the cell state is combined into hidden state. Update gate $$ z_t = \\sigma(W^{(z)}x_t + U^{(z)}h_{t - 1}) $$ Reset gate $$ r_t = \\sigma(W^{(r)}x_t + U^{(r)}h_{t - 1}) $$ New memory cell $$ \\tilde{h_t} = tanh(r_t\\circ Uh_{t - 1} + Wx_t) $$ Hidden state $$ h_t = (1 - z_t)\\circ \\tilde{h_t} + z_t\\circ h{t - 1} $$\nNeural Machine Translation Neural machine translation is generally a sequence to sequence model. It uses RNN as an encoder and another RNN as a decoder.\nLoss function: $$ J(\\theta) = \\frac{1}{T}\\sum_{t = 1}^T-log\\tilde{y_{x_{t + 1}}^{(t)}} $$ We choose the word with highest probability as the next input of the decoder.\nBilingual Evaluation Study (BLEU) Presion score: $p_n = \\frac{# matched n-grams}{# n-grams in the candidate translation}$ Weight: $w = \\frac{1}{2^n}$ Penalty: $\\beta = e^{min(0, 1 - \\frac{len_{ref}}{len_{MT}})}$ BLEU: $$ BLEU = \\beta\\prod_{i = 1}^kp_n^{w_n} $$\nAttention We can use the attention method to focus on the specific context of the current word.\nProcess:  Get the hidden states of the encoder $(h_1, h_2, h_T)$. Say the hidden state of the current decoder is $s_{t - 1}, we can use it for the relationship between input index j and current output index. $e_{ij} = a(s_{t - 1}, h_j)$, in the form of the vector is $\\vec{e_t} = (a(s_{t - 1}, h_1), \\cdots, a(s_{t - 1}, h_T))$, a denotes a relationship operation between s and h. Compute the attention by softmaxing $\\vec{e_t}$: $\\vec{a_t} = softmax(\\vec{e_t})$ Compute the context vector: $\\vec{c_t} = \\sum_{j =1}^Ta_{ij}h_j$ Finally, we have the next hidden state of the decoder in the form $s_t = f(s_{t - 1}, y_{t - 1}, c_t)$, and the ouput would be $p(y_t|y_1, \\cdots, y_{t - 1}, \\vec{x}) = g(y_{i - 1}, s_i, c_i)$.  Question Answering System We use the Stanford Question Answering Dataset.\nStanford Attention Reader We get the features of the questions with a Bidirectional LSTM. For the answers, we can use a Bidirectional LSTM to get the features of every word, and $Attention = (\\vec{feature_{q_i}}, \\vec{feature_{w_i}})$, so that we can infer the start position and the end position of the answer.\nThe loss function is: $$ L = -\\sum logP^{start}(a_{start}) - \\sum logP^{end}(a_{end}) $$\nBirectional Attention Flow The attention model here is bidirectional, because we have a query-to-context layer and a context to query layer.\nSimilar matrix: $$ S_{ij} = w_{sim}^T[c_i; q_j, c_i \\circ q_j]\\in R $$ Note that $c_i$, $q_i$ denote context vector and query vector respectively.\nFor the context to query attention,\nAttention score: $$ \\alpha^i = softmax(S_{i,:})\\in R^M \\forall i\\in{1,\\cdots, N} $$ Weighted vector: $$ a_i = \\sum_{j = 1}^M\\alpha^i_jq_j \\in R^{2h} \\forall i\\in{1,\\cdots, N} $$ For the query to context attention,\n$$ m_i = max_jS_{ij } \\in R \\forall i\\in{1,\\cdots, N} $$ $$ \\beta = softmax(m)\\in R^N $$ $$ c\u0026rsquo; = \\sum_{i = 1}^N\\beta^ic_i \\in R^{2h} $$ The output of the Attention Flow Layer would be $$ b_i = [c_i; a_i; c_i\\circ a_i; c_i\\circ c\u0026rsquo;] \\in R^{8h} \\forall i \\in{1, \\cdots, N} $$\nConvolutional Neural Network If the embedding of a word is a k-dimensional vector, a sentence is a matrix. With n word, the matrix size is n * k. We usually need to pad the sentence to have a deeper convolutional network.\nThe initiative of pooling is the stablize the network, when the input changes little.\nQuasi Recurrent Neural Network Quaso Recurrent Neural Network is a combination of convolutional neural network and recurrent neural network. The main idea is to use a convolutional neural network to extract features and replace the pooling layer with dynamic average pooling.\nFor the feature extraction, the candidate vector, forget gate, output gate is: $$ Z = tanh(W_z * X) $$ $$ F = \\sigma(W_f * X) $$ $$ O = \\sigma(W_o * X) $$ The dynamic average pooling is: $$ x_t = f_t\\cdot c_{t - 1} + (1 - f_t)\\cdot z_t $$ $$ h_t = o_t\\cdot c_t $$\nSubword Model Character-level model We can use more layers of convolution, pooling and highway to solve the complexity problem.\nByte Pair Encoding Byte pair encodes n-grams of the highest frequency until its vocabulary reaches the preset threshold.\nFasttText It takes a word as bag of character n-gram.\nContextual Word Representation Embeddings from Language Models (ELMO) ELMO uses a bidirectional LSTM to compute the contextual embedding. The lower layer represents the basic grammar information, while the higher layer represents context information.\nForward language model: $$ p(t_1, t_2, \\cdots, t_N) = \\prod_{k = 1}^Np(t_k|t_1, t_2, \\cdots, t_{k - 1}) $$ Backword language model: $$ p(t_1, t_2, \\cdots, t_N) = \\prod_{k = 1}^Np(t_k|t_{k + 1}, t_{k + 2}, \\cdots, t_N) $$ The initiative of the bidirectional LSTM is to maximaize: $$ \\sum_{k + 1}^N(logp(t_k|t_1, t_2, \\cdots, t{k - 1}) + logp(t_k|t_{k + 1}, t_{k + 2}, \\cdots, t_N)) $$ For the word at index k, it is represented by (2L + 1) vectors. One of them is an embedding not related to the context, while L layers of forward LSTM produces $\\vec{h_{kj}} related to the former paragraph and L layers of backward LSTM produces $\\vec{h_{kj}} for the rest of the paragraph. For the following layers, we have: $$ ELMO_k^{task} = E(R_k; \\theta^{task}) = \\gamma^{task}\\sum_{j = 0}^Ls_j^{task}h_{k, j}^{LM} $$ Note that $s^{task}$ is softmaxed and $\\gamma^{task}$ is a scale parameter.\nGenerative Pre Training (GPT) The basic structure of the GPT is a transformer, which is used for unsupervised learning for the text, and then we can use the embedding for supervised fine-tuning for the following tasks.\nNote that it is one direction.\nBidirectional Encoder Representations from Transformers Bert is especially tuned for:\n Predict a word with k% missing. Predict a following sentence.  Transformer Self Attention We compute the ralationship between words in self attention. The encoder has multiple self-attention layers, after which the input gets the context information for every word. The decoder has a similar structure, but it takes the output of itself and the output of encoder as its input.\nThe Structure of Self Attention  MatMul Scale Mask SoftMax MatMul For the encoder, the input is Query, Key and Value, and $d_k$ denotes that dimension of query and vectors. $$ Attention(Q, K, V) = softmax(\\frac{QK^T}{\\sqrt{d_k}})V $$  The Structure of a transformer  Positional encoding Multi-Head attention Add \u0026amp; Normalize Feed forward Position encoding allows the model to learn about the position of a word in the sentence.\nMulti-head attention contains multiple self-attention layers, and different head may learn different information of the features.\nThe Add part is very similar to Residual Connection, which can pass the information of the former layer to the next one.  ","date":"2020-09-01T00:00:00Z","permalink":"https://zychimne.github.io/posts/natural-language-processing-basics/","title":"Natural Language Processing Basics"}]